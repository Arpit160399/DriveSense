//
//  CoreDataAssessement.swift
//  DriveSenseTests
//
//  Created by Arpit Singh on 07/09/22.
//

import XCTest
import Combine
@testable import DriveSense
class CoreDataAssessement: XCTestCase {

    var task = Set<AnyCancellable>()
    var assessmentTestResource: AssessmentCoreDataTestResource!
    
    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
        let coreDataStack = try CoreDataStack()
        assessmentTestResource = try coreDataStack.createAssessementTestRepo()
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testExample() throws {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
        // Any test you write for XCTest can be annotated as throws and async.
        // Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.
        // Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.
    }

    func testCreateAssessmentIntoCoreData() throws {
        let model = assessmentTestResource.assessment
        let exp = expectation(description: "Successfully created Assessment.")
        assessmentTestResource.repo.create(assessment: model)
            .sink { completion in
                if case .failure( _ ) = completion {
                    XCTFail("Failed to create assessment object into core data")
                    exp.fulfill()
                }
            } receiveValue: { assessment in
                XCTAssertTrue(assessment.id == model.id,"Failed to map object into model")
                exp.fulfill()
            }
            .store(in: &task)
        wait(for: [exp], timeout: 5)
    }
    
    func testBatchCreationAssessmentIntoCoreData() throws {
        let createModels = Array(repeating: assessmentTestResource.assessment,count: 3)
        let exp = expectation(description: "Successfully batch created Assessment.")
        assessmentTestResource.repo.createBatch(assessment: createModels)
            .sink { completion in
                if case .failure(_ ) = completion {
                    XCTFail("failed to batch create the object")
                    exp.fulfill()
                }
            } receiveValue: { objects in
                for (model,object) in zip(createModels,objects) {
                    XCTAssertTrue(model.id == object.id, "failed to map object into model")
                }
                exp.fulfill()
            }.store(in: &task)
        wait(for: [exp], timeout: 5)
    }
    
    func testFetchOperation() throws {
        let exp = expectation(description: "Successfully fetched Assessment.")
        try testBatchCreationAssessmentIntoCoreData()
        assessmentTestResource.repo.fetch(page: 1, limit: 10, id: nil)
            .sink { completion in
                if case .failure(_ ) = completion {
                    XCTFail("failed to fetch the object")
                    exp.fulfill()
                }
            } receiveValue: { models in
                print(models)
                XCTAssertTrue(models.count > 2,"incorrect result generated by operation")
                exp.fulfill()
            }.store(in: &task)
        wait(for: [exp], timeout: 5)
    }
    
    func testCountOfAssessmentIntoCoreData() throws {
        let exp = expectation(description: "Successfully conducted count on Assessment.")
        try testBatchCreationAssessmentIntoCoreData()
        assessmentTestResource.repo.count()
            .sink { completion in
                if case .failure(_ ) = completion {
                    XCTFail("failed to count the given object")
                    exp.fulfill()
                }
            } receiveValue: { count in
                XCTAssertTrue(count > 3,"incorrect value return by the operation")
                exp.fulfill()
            }.store(in: &task)
        wait(for: [exp], timeout: 5)
    }
    
    
    func testPerformanceExample() throws {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }

}
